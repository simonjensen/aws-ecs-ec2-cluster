---
AWSTemplateFormatVersion: 2010-09-09
Description: AWS CloudFormation Stack for setting up an ECS Cluster

Parameters:

  ImageId:
    Type: String
    Description: The AMI to use for the EC2 instance
    Default: ami-05b65c0f6a75c1c64
  
  InstanceType:
    Type: String
    Description: The instance type to use
    Default: t2.small

  Environment:
    Type: String
    Description: Name of the environment this stack is deployed to
    Default: Development
    AllowedValues:
    - Development
    - Staging
    - Production

  KeyName:
    Type: String
    Description: The name of the Key file to use for the Cluster EC2 instances

  SshCidr:
    Type: String
    Description: The CIDR range to allow SSH access to the EC2 instance(s)

  VpcId:
    Type: String
    Description: Id of the VPC hosting this

  PrivateSubnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: The Private subnets to use for the EC2 Cluster instances

  PublicSubnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: The Public subnets to use for the Application Loadbalancer

  NumberOfEc2:
    Type: Number
    Description: The number of EC2 instances to start
    Default: 1
  
  SSLCertificateArn:
    Type: String
    Description: The SSL/TLS certificate ARN to use for the load balancer (optional)
    MinLength: 0
    MaxLength: 2048
  
  HealthCheckPath:
    Type: String
    Description: The relative path for the load balancer to use
    Default: /


Conditions:
  IsTlsEnabled: !Not [ !Equals [ !Ref SSLCertificateArn, "" ] ]


Resources:

  # ECS Cluster
  EcsCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref AWS::StackName

  
  # EC2 instance setup
  EcsRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - ec2.amazonaws.com

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref EcsRole

  Ec2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-Cluster-Instance"
      GroupDescription: !Sub "${AWS::StackName}-Cluster-Instance"
      SecurityGroupIngress:
      - Description: SSH
        IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: !Ref SshCidr
      - Description: All traffic from ALB
        IpProtocol: -1
        FromPort: 0
        ToPort: 65535
        SourceSecurityGroupId: !Ref ALBSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Cluster-Instance"
        - Key: Stack
          Value: !Ref AWS::StackName
        - Key: Environment
          Value: !Ref Environment
      VpcId: !Ref VpcId

  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref ImageId
      InstanceType: !Ref InstanceType
      IamInstanceProfile: !Ref InstanceProfile
      KeyName: !Ref KeyName
      SecurityGroups:
        - !Ref Ec2SecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum -y update
          yum -y install htop emacs
          echo ECS_CLUSTER=${AWS::StackName} >> /etc/ecs/ecs.config

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      MinSize: !Ref NumberOfEc2
      MaxSize: !Ref NumberOfEc2
      LaunchConfigurationName: !Ref LaunchConfiguration
      HealthCheckGracePeriod: 300
      HealthCheckType: EC2
      VPCZoneIdentifier:
        !Ref PrivateSubnets

  ScaleUpPolicy:
      Type: AWS::AutoScaling::ScalingPolicy
      Properties:
        AdjustmentType: ChangeInCapacity
        AutoScalingGroupName: !Ref AutoScalingGroup
        Cooldown: 1
        ScalingAdjustment: 1

  MemoryReservationAlarmHigh:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmDescription: Cluster Memory Reservation High
        AlarmName: !Sub "${AWS::StackName}: Cluster Memory Reservation High"
        EvaluationPeriods: 2
        Statistic: Average
        Threshold: 70
        Period: 60
        AlarmActions:
        - Ref: ScaleUpPolicy
        Namespace: AWS/ECS
        Dimensions:
        - Name: ClusterName
          Value: !Ref AWS::StackName
        ComparisonOperator: GreaterThanThreshold
        MetricName: MemoryReservation

  ScaleDownPolicy:
      Type: AWS::AutoScaling::ScalingPolicy
      Properties:
        AdjustmentType: ChangeInCapacity
        AutoScalingGroupName: !Ref AutoScalingGroup
        Cooldown: 1
        ScalingAdjustment: -1

  MemoryReservationAlarmLow:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmDescription: Cluster Memory Reservation Low
        AlarmName: !Sub "${AWS::StackName}: Cluster Memory Reservation Low"
        EvaluationPeriods: 2
        Statistic: Average
        Threshold: 30
        Period: 60
        AlarmActions:
        - Ref: ScaleDownPolicy
        Namespace: AWS/ECS
        Dimensions:
        - Name: ClusterName
          Value: !Ref AWS::StackName
        ComparisonOperator: LessThanThreshold
        MetricName: MemoryReservation

  # Application Load Balancer
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-ALB"
      GroupDescription: !Sub "${AWS::StackName}-ALB"
      SecurityGroupIngress:
      - Description: HTTP
        IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - Description: HTTPS
        IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ALB"
        - Key: Stack
          Value: !Ref AWS::StackName
        - Key: Environment
          Value: !Ref Environment
      VpcId: !Ref VpcId
  
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub "${AWS::StackName}-ALB"
      Subnets:
        !Ref PublicSubnets
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-ALB"
      - Key: Stack
        Value: !Ref AWS::StackName
      - Key: Environment
        Value: !Ref Environment

  AlbTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VpcId
      Port: !If [ IsTlsEnabled, 443, 80 ]
      Protocol: !If [ IsTlsEnabled, HTTPS, HTTP ]
      Matcher:
        HttpCode: 200
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: !Ref HealthCheckPath
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 4
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: 60
      TargetType: instance
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-AlbTargetGroup"
      - Key: Stack
        Value: !Ref AWS::StackName
      - Key: Environment
        Value: !Ref Environment
    DependsOn: ApplicationLoadBalancer
  
  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: !If [ IsTlsEnabled, 443, 80 ]
      Protocol: !If [ IsTlsEnabled, HTTPS, HTTP ]
      Certificates:
        - CertificateArn: !If [ IsTlsEnabled, !Ref SSLCertificateArn, !Ref "AWS::NoValue" ]
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref AlbTargetGroup
    DependsOn:
    - AlbTargetGroup
    - ApplicationLoadBalancer


Outputs:
  EcsCluster:
    Description: Name of the ECS Cluster
    Value: !Ref EcsCluster
  
  LaunchConfig:
    Description: Name of the Launch Configuration
    Value: !Ref LaunchConfiguration
  
  AutoScalingGroup:
    Description: Name of the Auto Scaling Group
    Value: !Ref AutoScalingGroup
  
  Ec2SecurityGroup:
    Description: Name of the Security Group attached to the EC2 instances
    Value: !Ref Ec2SecurityGroup
  
  ALBSecurityGroup:
    Description: Name of the Security Group attached to the ALB
    Value: !Ref ALBSecurityGroup
  
  AlbName:
    Description: Name of the ALB
    Value: !GetAtt ApplicationLoadBalancer.LoadBalancerName
  
  AlbDns:
    Description: DNS for the ALB
    Value: !GetAtt ApplicationLoadBalancer.DNSName